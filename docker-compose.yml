version: '3.8'

services:
  # Serviço do Agno AgentOS (Backend)
  agno-app:
    # O Coolify V4 fará o build a partir do Dockerfile na raiz do repositório
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agno-app
    # Variáveis de ambiente
    environment:
      # Configuração do banco de dados via variável de ambiente do Coolify
      # O Coolify injetará a string de conexão completa (ex: postgresql://user:pass@host:port/dbname)
      AGENTOS_DATABASE_URL: ${DATABASE_URL:?DATABASE_URL is required}
      AGENTOS_VECTOR_DB_URL: ${DATABASE_URL:?DATABASE_URL is required}
      
      # Variáveis de ambiente para o Coolify
      PORT: 80 # A porta exposta no Dockerfile
      HOST: 0.0.0.0
      RUNTIME_ENV: production
      PYTHONUNBUFFERED: 1
      PYTHONPATH: /app
      
      # Chaves de API (Coolify gerencia estas variáveis)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-}
      GROQ_API_KEY: ${GROQ_API_KEY:-}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY:-}
      XAI_API_KEY: ${XAI_API_KEY:-}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY:-}
      
      # Otimização: Ativação do MCP (Model Context Protocol)
      # AGENTOS_MCP_ENABLED: true
      
      # Otimização: Integração com Langfuse para Observabilidade
      # LANGFUSE_SECRET_KEY: ${LANGFUSE_SECRET_KEY:-}
      # LANGFUSE_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY:-}
      # LANGFUSE_HOST: ${LANGFUSE_HOST:-}

    restart: unless-stopped
    volumes:
      - app_data:/app/data
      - app_storage:/app/storage
    # Healthcheck para o Coolify monitorar a saúde do serviço
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s

volumes:
  app_data:
    driver: local
  app_storage:
    driver: local
